---
import { getImage } from 'astro:assets';
import { getEntry } from 'astro:content';
import { twMerge } from '@daks.dev/astro.sdk';

interface Props {
  class?: ClassValue;
}

const { class: className } = Astro.props;

const data = (await getEntry('gallery', 'home'))?.data ?? [];
const infographic = await Promise.all(
  data.map(async ({ src, count, title, max }) => ({
    src: await getImage({
      src: src,
      width: 96,
      fit: 'contain',
      quality: 80
    }),
    count,
    title,
    max
  }))
);
---

<app-home-infographic class={twMerge('flex flex-wrap justify-around gap-8', className)}>
  {
    infographic.map(
      ({
        src: {
          src,
          attributes: { width, height }
        },
        count,
        title,
        max
      }) => (
        <div
          class:list={['flex flex-col items-center gap-4', 'text-center']}
          data-max={max}>
          <canvas
            class:list={['text-slate-500', 'bg-current mask-contain mask-center mask-no-repeat']}
            style={{
              maskImage: `url(${src})`,
              opacity: 0.25
            }}
            {width}
            {height}
          />
          <span
            class:list={['text-4xl font-bold', 'text-zinc-500 dark:text-zinc-400']}
            set:html={count}
          />
          <span
            class='text-zinc-600 dark:text-zinc-300'
            set:html={title}
          />
        </div>
      )
    )
  }
</app-home-infographic>

<script>
  type Info = {
    image: HTMLCanvasElement;
    count: HTMLSpanElement;
    val: number;
    max: number;
    inteval?: ReturnType<typeof setInterval>;
  };

  class AppHomeInfographic extends HTMLElement {
    readonly duration = 3000;
    info: Info[] = [];
    max = 0;

    constructor() {
      super();
      this.querySelectorAll('div').forEach((e) => {
        const max = Number(e.dataset.max);
        if (max > this.max) this.max = max;
        this.info.push({
          image: e.querySelector('canvas')!,
          count: e.querySelector('span')!,
          val: 0,
          max
        });
      });
    }

    connectedCallback() {
      this.info.forEach((x, idx) => setTimeout(() => this.render(x), 500 + 500 * idx));
    }

    disconnectedCallback() {
      this.info.forEach((x) => clearInterval(x.inteval));
    }

    render = (x: Info) => {
      const step = this.duration / this.max;
      x.inteval = setInterval(() => {
        if (x.max - x.val >= x.max / step) x.val += x.max / step;
        else {
          x.val = x.max;
          x.image.style.opacity = '';
          clearInterval(x.inteval);
        }
        x.count.innerText = x.val.toFixed();
      }, step);
    };
  }
  customElements.define('app-home-infographic', AppHomeInfographic);
</script>
